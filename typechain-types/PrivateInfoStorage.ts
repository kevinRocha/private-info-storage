/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export interface PrivateInfoStorageInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "addToWhitelist"
      | "getPrivateInfo"
      | "owner"
      | "setPrivateInfo"
      | "whitelist"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic: "AddedToWhitelist" | "PrivateInfoUpdated"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "addToWhitelist",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getPrivateInfo",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "setPrivateInfo",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "whitelist",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "addToWhitelist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPrivateInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setPrivateInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "whitelist", data: BytesLike): Result;
}

export namespace AddedToWhitelistEvent {
  export type InputTuple = [_address: AddressLike];
  export type OutputTuple = [_address: string];
  export interface OutputObject {
    _address: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PrivateInfoUpdatedEvent {
  export type InputTuple = [_newInfo: string];
  export type OutputTuple = [_newInfo: string];
  export interface OutputObject {
    _newInfo: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface PrivateInfoStorage extends BaseContract {
  connect(runner?: ContractRunner | null): PrivateInfoStorage;
  waitForDeployment(): Promise<this>;

  interface: PrivateInfoStorageInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  addToWhitelist: TypedContractMethod<
    [_address: AddressLike],
    [void],
    "nonpayable"
  >;

  getPrivateInfo: TypedContractMethod<[], [string], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  setPrivateInfo: TypedContractMethod<[_info: string], [void], "nonpayable">;

  whitelist: TypedContractMethod<[arg0: AddressLike], [boolean], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "addToWhitelist"
  ): TypedContractMethod<[_address: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "getPrivateInfo"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "setPrivateInfo"
  ): TypedContractMethod<[_info: string], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "whitelist"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;

  getEvent(
    key: "AddedToWhitelist"
  ): TypedContractEvent<
    AddedToWhitelistEvent.InputTuple,
    AddedToWhitelistEvent.OutputTuple,
    AddedToWhitelistEvent.OutputObject
  >;
  getEvent(
    key: "PrivateInfoUpdated"
  ): TypedContractEvent<
    PrivateInfoUpdatedEvent.InputTuple,
    PrivateInfoUpdatedEvent.OutputTuple,
    PrivateInfoUpdatedEvent.OutputObject
  >;

  filters: {
    "AddedToWhitelist(address)": TypedContractEvent<
      AddedToWhitelistEvent.InputTuple,
      AddedToWhitelistEvent.OutputTuple,
      AddedToWhitelistEvent.OutputObject
    >;
    AddedToWhitelist: TypedContractEvent<
      AddedToWhitelistEvent.InputTuple,
      AddedToWhitelistEvent.OutputTuple,
      AddedToWhitelistEvent.OutputObject
    >;

    "PrivateInfoUpdated(string)": TypedContractEvent<
      PrivateInfoUpdatedEvent.InputTuple,
      PrivateInfoUpdatedEvent.OutputTuple,
      PrivateInfoUpdatedEvent.OutputObject
    >;
    PrivateInfoUpdated: TypedContractEvent<
      PrivateInfoUpdatedEvent.InputTuple,
      PrivateInfoUpdatedEvent.OutputTuple,
      PrivateInfoUpdatedEvent.OutputObject
    >;
  };
}
